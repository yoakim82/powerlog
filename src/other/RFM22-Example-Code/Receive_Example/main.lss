
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c0  00800100  00000b52  00000be6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b52  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000029  008001c0  008001c0  00000ca6  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00000ca6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cc  00000000  00000000  00000cc6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000043c  00000000  00000000  00000d92  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002b1  00000000  00000000  000011ce  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000658  00000000  00000000  0000147f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000100  00000000  00000000  00001ad8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  00001bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000126  00000000  00000000  00001d4d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
   4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
   c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  18:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  50:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
  78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
  7c:	11 24       	eor	r1, r1
  7e:	1f be       	out	0x3f, r1	; 63
  80:	cf ef       	ldi	r28, 0xFF	; 255
  82:	d0 e1       	ldi	r29, 0x10	; 16
  84:	de bf       	out	0x3e, r29	; 62
  86:	cd bf       	out	0x3d, r28	; 61

00000088 <__do_copy_data>:
  88:	11 e0       	ldi	r17, 0x01	; 1
  8a:	a0 e0       	ldi	r26, 0x00	; 0
  8c:	b1 e0       	ldi	r27, 0x01	; 1
  8e:	e2 e5       	ldi	r30, 0x52	; 82
  90:	fb e0       	ldi	r31, 0x0B	; 11
  92:	02 c0       	rjmp	.+4      	; 0x98 <.do_copy_data_start>

00000094 <.do_copy_data_loop>:
  94:	05 90       	lpm	r0, Z+
  96:	0d 92       	st	X+, r0

00000098 <.do_copy_data_start>:
  98:	a0 3c       	cpi	r26, 0xC0	; 192
  9a:	b1 07       	cpc	r27, r17
  9c:	d9 f7       	brne	.-10     	; 0x94 <.do_copy_data_loop>

0000009e <__do_clear_bss>:
  9e:	11 e0       	ldi	r17, 0x01	; 1
  a0:	a0 ec       	ldi	r26, 0xC0	; 192
  a2:	b1 e0       	ldi	r27, 0x01	; 1
  a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
  a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
  a8:	a9 3e       	cpi	r26, 0xE9	; 233
  aa:	b1 07       	cpc	r27, r17
  ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
  ae:	0e 94 2c 02 	call	0x458	; 0x458 <main>
  b2:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <_exit>

000000b6 <__bad_interrupt>:
  b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <read>:
	//returns the contents of any 1 byte register from any address
	//sets the MSB for every address byte (READ mode)

	char byte;

	address &= 0x7F;
  ba:	8f 77       	andi	r24, 0x7F	; 127

	cbi(CSPORT,CS);
  bc:	5f 98       	cbi	0x0b, 7	; 11
	return SPDR;
}

void txdata(char data)
{
	SPDR = data;
  be:	8e bd       	out	0x2e, r24	; 46
	while((SPSR&0x80) == 0x00);
  c0:	0d b4       	in	r0, 0x2d	; 45
  c2:	07 fe       	sbrs	r0, 7
  c4:	fd cf       	rjmp	.-6      	; 0xc0 <read+0x6>
	return byte;
}

char rxdata(void)
{
	SPDR = 0x55;
  c6:	85 e5       	ldi	r24, 0x55	; 85
  c8:	8e bd       	out	0x2e, r24	; 46
	while((SPSR&0x80) == 0x00);
  ca:	0d b4       	in	r0, 0x2d	; 45
  cc:	07 fe       	sbrs	r0, 7
  ce:	fd cf       	rjmp	.-6      	; 0xca <read+0x10>

	return SPDR;
  d0:	8e b5       	in	r24, 0x2e	; 46
	address &= 0x7F;

	cbi(CSPORT,CS);
	txdata(address);
	byte = rxdata();
	sbi(CSPORT,CS);
  d2:	5f 9a       	sbi	0x0b, 7	; 11

	return byte;
}
  d4:	08 95       	ret

000000d6 <rxdata>:

char rxdata(void)
{
	SPDR = 0x55;
  d6:	85 e5       	ldi	r24, 0x55	; 85
  d8:	8e bd       	out	0x2e, r24	; 46
	while((SPSR&0x80) == 0x00);
  da:	0d b4       	in	r0, 0x2d	; 45
  dc:	07 fe       	sbrs	r0, 7
  de:	fd cf       	rjmp	.-6      	; 0xda <rxdata+0x4>

	return SPDR;
  e0:	8e b5       	in	r24, 0x2e	; 46
}
  e2:	08 95       	ret

000000e4 <txdata>:

void txdata(char data)
{
	SPDR = data;
  e4:	8e bd       	out	0x2e, r24	; 46
	while((SPSR&0x80) == 0x00);
  e6:	0d b4       	in	r0, 0x2d	; 45
  e8:	07 fe       	sbrs	r0, 7
  ea:	fd cf       	rjmp	.-6      	; 0xe6 <txdata+0x2>
}
  ec:	08 95       	ret

000000ee <init_SPI>:
	// enable SPI
	// make SPI master
	// SCLK idle low
	// sample data on rising edge
	// SPCR |= 0b01010011;	// SPIclk = FOSC/128
	SPCR |= 0b01010000;	// SPIclk = Fosc/4
  ee:	8c b5       	in	r24, 0x2c	; 44
  f0:	80 65       	ori	r24, 0x50	; 80
  f2:	8c bd       	out	0x2c, r24	; 44
}
  f4:	08 95       	ret

000000f6 <uart_putchar>:

static int uart_putchar(char c, FILE *stream)
{
  f6:	1f 93       	push	r17
  f8:	18 2f       	mov	r17, r24
    if (c == '\n') uart_putchar('\r', stream);
  fa:	8a 30       	cpi	r24, 0x0A	; 10
  fc:	19 f4       	brne	.+6      	; 0x104 <uart_putchar+0xe>
  fe:	8d e0       	ldi	r24, 0x0D	; 13
 100:	0e 94 7b 00 	call	0xf6	; 0xf6 <uart_putchar>

    loop_until_bit_is_set(UCSR1A, UDRE1);
 104:	80 91 c8 00 	lds	r24, 0x00C8
 108:	85 ff       	sbrs	r24, 5
 10a:	fc cf       	rjmp	.-8      	; 0x104 <uart_putchar+0xe>
    UDR1 = c;
 10c:	10 93 ce 00 	sts	0x00CE, r17

    return 0;
}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	1f 91       	pop	r17
 116:	08 95       	ret

00000118 <uart_getchar>:

uint8_t uart_getchar(void)
{
    while( !(UCSR1A & (1<<RXC1)) );
 118:	80 91 c8 00 	lds	r24, 0x00C8
 11c:	87 ff       	sbrs	r24, 7
 11e:	fc cf       	rjmp	.-8      	; 0x118 <uart_getchar>
    return(UDR1);
 120:	80 91 ce 00 	lds	r24, 0x00CE
}
 124:	08 95       	ret

00000126 <ioinit>:


void ioinit (void)
{
    //1 = output, 0 = input
    DDRB = 0b10111000; //MISO input, pb2:0 input (GPIO)
 126:	88 eb       	ldi	r24, 0xB8	; 184
 128:	84 b9       	out	0x04, r24	; 4
    DDRC = 0b11111111; //All outputs
 12a:	8f ef       	ldi	r24, 0xFF	; 255
 12c:	87 b9       	out	0x07, r24	; 7
    DDRD = 0b11101010; //PORTD (RX on PD0), PD4 input (IRQ)
 12e:	8a ee       	ldi	r24, 0xEA	; 234
 130:	8a b9       	out	0x0a, r24	; 10
	stdout = &mystdout; //Required for printf init
 132:	81 eb       	ldi	r24, 0xB1	; 177
 134:	91 e0       	ldi	r25, 0x01	; 1
 136:	90 93 e6 01 	sts	0x01E6, r25
 13a:	80 93 e5 01 	sts	0x01E5, r24
	int MYUBRR = 12;
	UBRR1H = (MYUBRR) >> 8;
 13e:	10 92 cd 00 	sts	0x00CD, r1
	UBRR1L = MYUBRR;
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	80 93 cc 00 	sts	0x00CC, r24
	UCSR1B = (1<<RXEN1)|(1<<TXEN1);
 148:	88 e1       	ldi	r24, 0x18	; 24
 14a:	80 93 c9 00 	sts	0x00C9, r24
	UCSR1C = (3<<UCSZ10);
 14e:	86 e0       	ldi	r24, 0x06	; 6
 150:	80 93 ca 00 	sts	0x00CA, r24
	UCSR1A = (1<<U2X1);
 154:	82 e0       	ldi	r24, 0x02	; 2
 156:	80 93 c8 00 	sts	0x00C8, r24

	
	TCCR2B = (1<<CS21);
 15a:	80 93 b1 00 	sts	0x00B1, r24
	
	cbi(PORTD, TXANT);
 15e:	5d 98       	cbi	0x0b, 5	; 11
	cbi(PORTD, RXANT);
 160:	5e 98       	cbi	0x0b, 6	; 11
}
 162:	08 95       	ret

00000164 <delay_us>:
        delay_us(1000);
}

//General short delays
void delay_us(uint16_t x)
{
 164:	9c 01       	movw	r18, r24
    while(x > 256)
    {
        TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	07 c0       	rjmp	.+14     	; 0x178 <delay_us+0x14>
 16a:	87 bb       	out	0x17, r24	; 23
        TCNT2 = 0; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 16c:	10 92 b2 00 	sts	0x00B2, r1
        while( (TIFR2 & (1<<TOV2)) == 0);
 170:	b8 9b       	sbis	0x17, 0	; 23
 172:	fe cf       	rjmp	.-4      	; 0x170 <delay_us+0xc>

        x -= 256;
 174:	20 50       	subi	r18, 0x00	; 0
 176:	31 40       	sbci	r19, 0x01	; 1
}

//General short delays
void delay_us(uint16_t x)
{
    while(x > 256)
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	21 30       	cpi	r18, 0x01	; 1
 17c:	39 07       	cpc	r19, r25
 17e:	a8 f7       	brcc	.-22     	; 0x16a <delay_us+0x6>
        while( (TIFR2 & (1<<TOV2)) == 0);

        x -= 256;
    }

    TIFR2 = (1<<TOV2); //Clear any interrupt flags on Timer2
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	87 bb       	out	0x17, r24	; 23
    TCNT2= 256 - x; //256 - 125 = 131 : Preload timer 2 for x clicks. Should be 1us per click
 184:	82 2f       	mov	r24, r18
 186:	81 95       	neg	r24
 188:	80 93 b2 00 	sts	0x00B2, r24
    while( (TIFR2 & (1<<TOV2)) == 0);
 18c:	b8 9b       	sbis	0x17, 0	; 23
 18e:	fe cf       	rjmp	.-4      	; 0x18c <delay_us+0x28>
}
 190:	08 95       	ret

00000192 <delay_ms>:
	cbi(PORTD, RXANT);
}

//General short delays
void delay_ms(uint16_t x)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	ec 01       	movw	r28, r24
 198:	05 c0       	rjmp	.+10     	; 0x1a4 <delay_ms+0x12>
    for (; x > 0 ; x--)
        delay_us(1000);
 19a:	88 ee       	ldi	r24, 0xE8	; 232
 19c:	93 e0       	ldi	r25, 0x03	; 3
 19e:	0e 94 b2 00 	call	0x164	; 0x164 <delay_us>
}

//General short delays
void delay_ms(uint16_t x)
{
    for (; x > 0 ; x--)
 1a2:	21 97       	sbiw	r28, 0x01	; 1
 1a4:	20 97       	sbiw	r28, 0x00	; 0
 1a6:	c9 f7       	brne	.-14     	; 0x19a <delay_ms+0x8>
        delay_us(1000);
}
 1a8:	df 91       	pop	r29
 1aa:	cf 91       	pop	r28
 1ac:	08 95       	ret

000001ae <write>:
	else
		printf("INT == 1\n");
}

void write(uint8_t address, char data)
{
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	06 2f       	mov	r16, r22
	//write any data byte to any single address
	//adds a 0 to the MSB of the address byte (WRITE mode)
	
	address |= 0x80;
 1b4:	18 2f       	mov	r17, r24
 1b6:	10 68       	ori	r17, 0x80	; 128

	cbi(CSPORT,CS);
 1b8:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 1ba:	81 e0       	ldi	r24, 0x01	; 1
 1bc:	90 e0       	ldi	r25, 0x00	; 0
 1be:	0e 94 c9 00 	call	0x192	; 0x192 <delay_ms>
	return SPDR;
}

void txdata(char data)
{
	SPDR = data;
 1c2:	1e bd       	out	0x2e, r17	; 46
	while((SPSR&0x80) == 0x00);
 1c4:	0d b4       	in	r0, 0x2d	; 45
 1c6:	07 fe       	sbrs	r0, 7
 1c8:	fd cf       	rjmp	.-6      	; 0x1c4 <write+0x16>
	address |= 0x80;

	cbi(CSPORT,CS);
	delay_ms(1);
	txdata(address);
	delay_ms(1);
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	0e 94 c9 00 	call	0x192	; 0x192 <delay_ms>
	return SPDR;
}

void txdata(char data)
{
	SPDR = data;
 1d2:	0e bd       	out	0x2e, r16	; 46
	while((SPSR&0x80) == 0x00);
 1d4:	0d b4       	in	r0, 0x2d	; 45
 1d6:	07 fe       	sbrs	r0, 7
 1d8:	fd cf       	rjmp	.-6      	; 0x1d4 <write+0x26>
	cbi(CSPORT,CS);
	delay_ms(1);
	txdata(address);
	delay_ms(1);
	txdata(data);
	delay_ms(1);
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 c9 00 	call	0x192	; 0x192 <delay_ms>
	sbi(CSPORT,CS);
 1e2:	5f 9a       	sbi	0x0b, 7	; 11
}
 1e4:	1f 91       	pop	r17
 1e6:	0f 91       	pop	r16
 1e8:	08 95       	ret

000001ea <rx_reset>:

void rx_reset(void)
{
	unsigned char i;
	
	write(0x07, 0x01);	// to ready mode
 1ea:	87 e0       	ldi	r24, 0x07	; 7
 1ec:	61 e0       	ldi	r22, 0x01	; 1
 1ee:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	i = read(0x03);
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	0e 94 5d 00 	call	0xba	; 0xba <read>
	i = read(0x04);
 1f8:	84 e0       	ldi	r24, 0x04	; 4
 1fa:	0e 94 5d 00 	call	0xba	; 0xba <read>
	
	write(0x7E, 17);
 1fe:	8e e7       	ldi	r24, 0x7E	; 126
 200:	61 e1       	ldi	r22, 0x11	; 17
 202:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x08, 0x03);
 206:	88 e0       	ldi	r24, 0x08	; 8
 208:	63 e0       	ldi	r22, 0x03	; 3
 20a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x08, 0x00);
 20e:	88 e0       	ldi	r24, 0x08	; 8
 210:	60 e0       	ldi	r22, 0x00	; 0
 212:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x07, 5);
 216:	87 e0       	ldi	r24, 0x07	; 7
 218:	65 e0       	ldi	r22, 0x05	; 5
 21a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x05, 2);
 21e:	85 e0       	ldi	r24, 0x05	; 5
 220:	62 e0       	ldi	r22, 0x02	; 2
 222:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
}
 226:	08 95       	ret

00000228 <init_RFM22>:
}

// Initialize the RFM22 for transmitting
void init_RFM22(void)
{
	write(INTEN2, 0x00);	// Disable all interrupts
 228:	86 e0       	ldi	r24, 0x06	; 6
 22a:	60 e0       	ldi	r22, 0x00	; 0
 22c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(OMFC1, 0x01);		// Set READY mode
 230:	87 e0       	ldi	r24, 0x07	; 7
 232:	61 e0       	ldi	r22, 0x01	; 1
 234:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x09, 0x7F);		// Cap = 12.5pF
 238:	89 e0       	ldi	r24, 0x09	; 9
 23a:	6f e7       	ldi	r22, 0x7F	; 127
 23c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	//write(0x0A, 0x05);		// Clk output is 2MHz
	
	write(0x0B, 0xF4);		// GPIO0 is for RX data output
 240:	8b e0       	ldi	r24, 0x0B	; 11
 242:	64 ef       	ldi	r22, 0xF4	; 244
 244:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x0C, 0xEF);		// GPIO1 is TX/RX data CLK output
 248:	8c e0       	ldi	r24, 0x0C	; 12
 24a:	6f ee       	ldi	r22, 0xEF	; 239
 24c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x0D, 0x00);		// GPIO2 for MCLK output
 250:	8d e0       	ldi	r24, 0x0D	; 13
 252:	60 e0       	ldi	r22, 0x00	; 0
 254:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x0E, 0x00);		// GPIO port use default value
 258:	8e e0       	ldi	r24, 0x0E	; 14
 25a:	60 e0       	ldi	r22, 0x00	; 0
 25c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x0F, 0x70);		// NO ADC used
 260:	8f e0       	ldi	r24, 0x0F	; 15
 262:	60 e7       	ldi	r22, 0x70	; 112
 264:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x10, 0x00);		// no ADC used
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	60 e0       	ldi	r22, 0x00	; 0
 26c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x12, 0x00);		// No temp sensor used
 270:	82 e1       	ldi	r24, 0x12	; 18
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x13, 0x00);		// no temp sensor used
 278:	83 e1       	ldi	r24, 0x13	; 19
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x70, 0x20);		// No manchester code, no data whiting, data rate < 30Kbps
 280:	80 e7       	ldi	r24, 0x70	; 112
 282:	60 e2       	ldi	r22, 0x20	; 32
 284:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x1C, 0x1D);		// IF filter bandwidth
 288:	8c e1       	ldi	r24, 0x1C	; 28
 28a:	6d e1       	ldi	r22, 0x1D	; 29
 28c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x1D, 0x40);		// AFC Loop
 290:	8d e1       	ldi	r24, 0x1D	; 29
 292:	60 e4       	ldi	r22, 0x40	; 64
 294:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	//write(0x1E, 0x0A);	// AFC timing
	
	write(0x20, 0xA1);		// clock recovery
 298:	80 e2       	ldi	r24, 0x20	; 32
 29a:	61 ea       	ldi	r22, 0xA1	; 161
 29c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x21, 0x20);		// clock recovery
 2a0:	81 e2       	ldi	r24, 0x21	; 33
 2a2:	60 e2       	ldi	r22, 0x20	; 32
 2a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x22, 0x4E);		// clock recovery
 2a8:	82 e2       	ldi	r24, 0x22	; 34
 2aa:	6e e4       	ldi	r22, 0x4E	; 78
 2ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x23, 0xA5);		// clock recovery
 2b0:	83 e2       	ldi	r24, 0x23	; 35
 2b2:	65 ea       	ldi	r22, 0xA5	; 165
 2b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x24, 0x00);		// clock recovery timing
 2b8:	84 e2       	ldi	r24, 0x24	; 36
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x25, 0x0A);		// clock recovery timing
 2c0:	85 e2       	ldi	r24, 0x25	; 37
 2c2:	6a e0       	ldi	r22, 0x0A	; 10
 2c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	//write(0x2A, 0x18);
	write(0x2C, 0x00);
 2c8:	8c e2       	ldi	r24, 0x2C	; 44
 2ca:	60 e0       	ldi	r22, 0x00	; 0
 2cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x2D, 0x00);
 2d0:	8d e2       	ldi	r24, 0x2D	; 45
 2d2:	60 e0       	ldi	r22, 0x00	; 0
 2d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x2E, 0x00);
 2d8:	8e e2       	ldi	r24, 0x2E	; 46
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x6E, 0x27);		// TX data rate 1
 2e0:	8e e6       	ldi	r24, 0x6E	; 110
 2e2:	67 e2       	ldi	r22, 0x27	; 39
 2e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x6F, 0x52);		// TX data rate 0
 2e8:	8f e6       	ldi	r24, 0x6F	; 111
 2ea:	62 e5       	ldi	r22, 0x52	; 82
 2ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x30, 0x8C);		// Data access control
 2f0:	80 e3       	ldi	r24, 0x30	; 48
 2f2:	6c e8       	ldi	r22, 0x8C	; 140
 2f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x32, 0xFF);		// Header control
 2f8:	82 e3       	ldi	r24, 0x32	; 50
 2fa:	6f ef       	ldi	r22, 0xFF	; 255
 2fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x33, 0x42);		// Header 3, 2, 1, 0 used for head length, fixed packet length, synchronize word length 3, 2,
 300:	83 e3       	ldi	r24, 0x33	; 51
 302:	62 e4       	ldi	r22, 0x42	; 66
 304:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x34, 64);		// 64 nibble = 32 byte preamble
 308:	84 e3       	ldi	r24, 0x34	; 52
 30a:	60 e4       	ldi	r22, 0x40	; 64
 30c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x35, 0x20);		// 0x35 need to detect 20bit preamble
 310:	85 e3       	ldi	r24, 0x35	; 53
 312:	60 e2       	ldi	r22, 0x20	; 32
 314:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x36, 0x2D);		// synchronize word
 318:	86 e3       	ldi	r24, 0x36	; 54
 31a:	6d e2       	ldi	r22, 0x2D	; 45
 31c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x37, 0xD4);
 320:	87 e3       	ldi	r24, 0x37	; 55
 322:	64 ed       	ldi	r22, 0xD4	; 212
 324:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x38, 0x00);
 328:	88 e3       	ldi	r24, 0x38	; 56
 32a:	60 e0       	ldi	r22, 0x00	; 0
 32c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x39, 0x00);
 330:	89 e3       	ldi	r24, 0x39	; 57
 332:	60 e0       	ldi	r22, 0x00	; 0
 334:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x3A, 's');		// set tx header 3
 338:	8a e3       	ldi	r24, 0x3A	; 58
 33a:	63 e7       	ldi	r22, 0x73	; 115
 33c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x3B, 'o');		// set tx header 2
 340:	8b e3       	ldi	r24, 0x3B	; 59
 342:	6f e6       	ldi	r22, 0x6F	; 111
 344:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x3C, 'n');		// set tx header 1
 348:	8c e3       	ldi	r24, 0x3C	; 60
 34a:	6e e6       	ldi	r22, 0x6E	; 110
 34c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x3D, 'g');		// set tx header 0
 350:	8d e3       	ldi	r24, 0x3D	; 61
 352:	67 e6       	ldi	r22, 0x67	; 103
 354:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x3E, 17);		// set packet length to 17 bytes
 358:	8e e3       	ldi	r24, 0x3E	; 62
 35a:	61 e1       	ldi	r22, 0x11	; 17
 35c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x3F, 's');		// set rx header
 360:	8f e3       	ldi	r24, 0x3F	; 63
 362:	63 e7       	ldi	r22, 0x73	; 115
 364:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x40, 'o');
 368:	80 e4       	ldi	r24, 0x40	; 64
 36a:	6f e6       	ldi	r22, 0x6F	; 111
 36c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x41, 'n');
 370:	81 e4       	ldi	r24, 0x41	; 65
 372:	6e e6       	ldi	r22, 0x6E	; 110
 374:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x42, 'g');
 378:	82 e4       	ldi	r24, 0x42	; 66
 37a:	67 e6       	ldi	r22, 0x67	; 103
 37c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x43, 0xFF);		// check all bits
 380:	83 e4       	ldi	r24, 0x43	; 67
 382:	6f ef       	ldi	r22, 0xFF	; 255
 384:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x44, 0xFF);		// Check all bits
 388:	84 e4       	ldi	r24, 0x44	; 68
 38a:	6f ef       	ldi	r22, 0xFF	; 255
 38c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x45, 0xFF);		// check all bits
 390:	85 e4       	ldi	r24, 0x45	; 69
 392:	6f ef       	ldi	r22, 0xFF	; 255
 394:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x46, 0xFF);		// Check all bits
 398:	86 e4       	ldi	r24, 0x46	; 70
 39a:	6f ef       	ldi	r22, 0xFF	; 255
 39c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x56, 0x01);
 3a0:	86 e5       	ldi	r24, 0x56	; 86
 3a2:	61 e0       	ldi	r22, 0x01	; 1
 3a4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x6D, 0x07);		// Tx power to max
 3a8:	8d e6       	ldi	r24, 0x6D	; 109
 3aa:	67 e0       	ldi	r22, 0x07	; 7
 3ac:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x79, 0x00);		// no frequency hopping
 3b0:	89 e7       	ldi	r24, 0x79	; 121
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x7A, 0x00);		// no frequency hopping
 3b8:	8a e7       	ldi	r24, 0x7A	; 122
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x71, 0x22);		// GFSK, fd[8]=0, no invert for TX/RX data, FIFO mode, txclk-->gpio
 3c0:	81 e7       	ldi	r24, 0x71	; 113
 3c2:	62 e2       	ldi	r22, 0x22	; 34
 3c4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x72, 0x48);		// Frequency deviation setting to 45K=72*625
 3c8:	82 e7       	ldi	r24, 0x72	; 114
 3ca:	68 e4       	ldi	r22, 0x48	; 72
 3cc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x73, 0x00);		// No frequency offset
 3d0:	83 e7       	ldi	r24, 0x73	; 115
 3d2:	60 e0       	ldi	r22, 0x00	; 0
 3d4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x74, 0x00);		// No frequency offset
 3d8:	84 e7       	ldi	r24, 0x74	; 116
 3da:	60 e0       	ldi	r22, 0x00	; 0
 3dc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x75, 0x53);		// frequency set to 434MHz
 3e0:	85 e7       	ldi	r24, 0x75	; 117
 3e2:	63 e5       	ldi	r22, 0x53	; 83
 3e4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x76, 0x64);		// frequency set to 434MHz
 3e8:	86 e7       	ldi	r24, 0x76	; 118
 3ea:	64 e6       	ldi	r22, 0x64	; 100
 3ec:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x77, 0x00);		// frequency set to 434Mhz
 3f0:	87 e7       	ldi	r24, 0x77	; 119
 3f2:	60 e0       	ldi	r22, 0x00	; 0
 3f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x5A, 0x7F);
 3f8:	8a e5       	ldi	r24, 0x5A	; 90
 3fa:	6f e7       	ldi	r22, 0x7F	; 127
 3fc:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x59, 0x40);
 400:	89 e5       	ldi	r24, 0x59	; 89
 402:	60 e4       	ldi	r22, 0x40	; 64
 404:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x58, 0x80);
 408:	88 e5       	ldi	r24, 0x58	; 88
 40a:	60 e8       	ldi	r22, 0x80	; 128
 40c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	write(0x6A, 0x0B);
 410:	8a e6       	ldi	r24, 0x6A	; 106
 412:	6b e0       	ldi	r22, 0x0B	; 11
 414:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x68, 0x04);
 418:	88 e6       	ldi	r24, 0x68	; 104
 41a:	64 e0       	ldi	r22, 0x04	; 4
 41c:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	write(0x1F, 0x03);
 420:	8f e1       	ldi	r24, 0x1F	; 31
 422:	63 e0       	ldi	r22, 0x03	; 3
 424:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
}
 428:	08 95       	ret

0000042a <to_rx_mode>:

void to_rx_mode(void)
{
	write(0x07, 0x01);	// to ready mode
 42a:	87 e0       	ldi	r24, 0x07	; 7
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
	
	sbi(PORTD, RXANT);
 432:	5e 9a       	sbi	0x0b, 6	; 11
	cbi(PORTD, TXANT);
 434:	5d 98       	cbi	0x0b, 5	; 11
	delay_ms(50);
 436:	82 e3       	ldi	r24, 0x32	; 50
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 c9 00 	call	0x192	; 0x192 <delay_ms>
	rx_reset();
 43e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rx_reset>
}
 442:	08 95       	ret

00000444 <checkINT>:
	write(0x05, 2);
}

void checkINT(void)
{
	if ((PIND & (1<<NIRQ)) == 0)
 444:	4c 99       	sbic	0x09, 4	; 9
 446:	03 c0       	rjmp	.+6      	; 0x44e <checkINT+0xa>
		printf("INT == 0\n");
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	91 e0       	ldi	r25, 0x01	; 1
 44c:	02 c0       	rjmp	.+4      	; 0x452 <checkINT+0xe>
	else
		printf("INT == 1\n");
 44e:	89 e0       	ldi	r24, 0x09	; 9
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	0e 94 be 02 	call	0x57c	; 0x57c <puts>
 456:	08 95       	ret

00000458 <main>:
//======================//
//Global Variables
unsigned char RF_RXBUF[35];

int main(void)
{
 458:	ef 92       	push	r14
 45a:	ff 92       	push	r15
 45c:	0f 93       	push	r16
 45e:	1f 93       	push	r17
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
	unsigned char i, chksum;

	ioinit();
 464:	0e 94 93 00 	call	0x126	; 0x126 <ioinit>
	// enable SPI
	// make SPI master
	// SCLK idle low
	// sample data on rising edge
	// SPCR |= 0b01010011;	// SPIclk = FOSC/128
	SPCR |= 0b01010000;	// SPIclk = Fosc/4
 468:	8c b5       	in	r24, 0x2c	; 44
 46a:	80 65       	ori	r24, 0x50	; 80
 46c:	8c bd       	out	0x2c, r24	; 44
{
	unsigned char i, chksum;

	ioinit();
	init_SPI();
	sbi(CSPORT,CS);
 46e:	5f 9a       	sbi	0x0b, 7	; 11
	printf("********RFM22 Communication Test********\n");
 470:	82 e1       	ldi	r24, 0x12	; 18
 472:	91 e0       	ldi	r25, 0x01	; 1
 474:	0e 94 be 02 	call	0x57c	; 0x57c <puts>

	//====================//
	//Communications Test
	printf("Reading DTYPE register, should be 0x08: %d", read(DTYPE));
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	0e 94 5d 00 	call	0xba	; 0xba <read>
 47e:	00 d0       	rcall	.+0      	; 0x480 <main+0x28>
 480:	00 d0       	rcall	.+0      	; 0x482 <main+0x2a>
 482:	ed b7       	in	r30, 0x3d	; 61
 484:	fe b7       	in	r31, 0x3e	; 62
 486:	31 96       	adiw	r30, 0x01	; 1
 488:	2b e3       	ldi	r18, 0x3B	; 59
 48a:	31 e0       	ldi	r19, 0x01	; 1
 48c:	ad b7       	in	r26, 0x3d	; 61
 48e:	be b7       	in	r27, 0x3e	; 62
 490:	12 96       	adiw	r26, 0x02	; 2
 492:	3c 93       	st	X, r19
 494:	2e 93       	st	-X, r18
 496:	11 97       	sbiw	r26, 0x01	; 1
 498:	82 83       	std	Z+2, r24	; 0x02
 49a:	13 82       	std	Z+3, r1	; 0x03
 49c:	0e 94 a2 02 	call	0x544	; 0x544 <printf>
	
	printf("\n*****************************************\n\n");
 4a0:	0f 90       	pop	r0
 4a2:	0f 90       	pop	r0
 4a4:	0f 90       	pop	r0
 4a6:	0f 90       	pop	r0
 4a8:	86 e6       	ldi	r24, 0x66	; 102
 4aa:	91 e0       	ldi	r25, 0x01	; 1
 4ac:	0e 94 be 02 	call	0x57c	; 0x57c <puts>
	
	init_RFM22();	// Initialize all RFM22 registers
 4b0:	0e 94 14 01 	call	0x228	; 0x228 <init_RFM22>
	printf("Entering RX Mode...\n");
 4b4:	82 e9       	ldi	r24, 0x92	; 146
 4b6:	91 e0       	ldi	r25, 0x01	; 1
 4b8:	0e 94 be 02 	call	0x57c	; 0x57c <puts>
	to_rx_mode();
 4bc:	0e 94 15 02 	call	0x42a	; 0x42a <to_rx_mode>
		
			// If checksum is good, print out what was received into the terminal
			if(chksum == RF_RXBUF[16])
			{
				write(0x07, 0x01);	// To ready mode
				printf("Received: ");
 4c0:	86 ea       	ldi	r24, 0xA6	; 166
 4c2:	e8 2e       	mov	r14, r24
 4c4:	81 e0       	ldi	r24, 0x01	; 1
 4c6:	f8 2e       	mov	r15, r24
	printf("Entering RX Mode...\n");
	to_rx_mode();
	
	while(1)
	{
		if((PIND & (1<<NIRQ)) == 0)	//Interrupt will be generated if data is recieved
 4c8:	4c 99       	sbic	0x09, 4	; 9
 4ca:	fe cf       	rjmp	.-4      	; 0x4c8 <main+0x70>
 4cc:	00 ec       	ldi	r16, 0xC0	; 192
 4ce:	11 e0       	ldi	r17, 0x01	; 1
 4d0:	e8 01       	movw	r28, r16
		{
			// Read 18-byte packet into RF_RXBUF[]:
			for(i=0; i<17; i++)
			{
				RF_RXBUF[i] = read(0x7F);
 4d2:	8f e7       	ldi	r24, 0x7F	; 127
 4d4:	0e 94 5d 00 	call	0xba	; 0xba <read>
 4d8:	89 93       	st	Y+, r24
	while(1)
	{
		if((PIND & (1<<NIRQ)) == 0)	//Interrupt will be generated if data is recieved
		{
			// Read 18-byte packet into RF_RXBUF[]:
			for(i=0; i<17; i++)
 4da:	b1 e0       	ldi	r27, 0x01	; 1
 4dc:	c1 3d       	cpi	r28, 0xD1	; 209
 4de:	db 07       	cpc	r29, r27
 4e0:	c1 f7       	brne	.-16     	; 0x4d2 <main+0x7a>
 4e2:	fe 01       	movw	r30, r28
 4e4:	71 97       	sbiw	r30, 0x11	; 17
 4e6:	90 e0       	ldi	r25, 0x00	; 0
			}
			
			// Check that the checksum matches up:
			chksum = 0;
			for(i=0; i<16; i++)
				chksum += RF_RXBUF[i];
 4e8:	81 91       	ld	r24, Z+
 4ea:	98 0f       	add	r25, r24
				RF_RXBUF[i] = read(0x7F);
			}
			
			// Check that the checksum matches up:
			chksum = 0;
			for(i=0; i<16; i++)
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	e0 3d       	cpi	r30, 0xD0	; 208
 4f0:	f8 07       	cpc	r31, r24
 4f2:	d1 f7       	brne	.-12     	; 0x4e8 <main+0x90>
				chksum += RF_RXBUF[i];
		
			// If checksum is good, print out what was received into the terminal
			if(chksum == RF_RXBUF[16])
 4f4:	80 81       	ld	r24, Z
 4f6:	98 17       	cp	r25, r24
 4f8:	f1 f4       	brne	.+60     	; 0x536 <main+0xde>
			{
				write(0x07, 0x01);	// To ready mode
 4fa:	87 e0       	ldi	r24, 0x07	; 7
 4fc:	61 e0       	ldi	r22, 0x01	; 1
 4fe:	0e 94 d7 00 	call	0x1ae	; 0x1ae <write>
				printf("Received: ");
 502:	00 d0       	rcall	.+0      	; 0x504 <main+0xac>
 504:	ad b7       	in	r26, 0x3d	; 61
 506:	be b7       	in	r27, 0x3e	; 62
 508:	12 96       	adiw	r26, 0x02	; 2
 50a:	fc 92       	st	X, r15
 50c:	ee 92       	st	-X, r14
 50e:	11 97       	sbiw	r26, 0x01	; 1
 510:	0e 94 a2 02 	call	0x544	; 0x544 <printf>
 514:	0f 90       	pop	r0
 516:	0f 90       	pop	r0
				for(i=0; i<17; i++)
					printf("%c", RF_RXBUF[i]);	// Print characters if passed the checksum
 518:	f8 01       	movw	r30, r16
 51a:	81 91       	ld	r24, Z+
 51c:	8f 01       	movw	r16, r30
 51e:	90 e0       	ldi	r25, 0x00	; 0
 520:	0e 94 b7 02 	call	0x56e	; 0x56e <putchar>
			// If checksum is good, print out what was received into the terminal
			if(chksum == RF_RXBUF[16])
			{
				write(0x07, 0x01);	// To ready mode
				printf("Received: ");
				for(i=0; i<17; i++)
 524:	f1 e0       	ldi	r31, 0x01	; 1
 526:	01 3d       	cpi	r16, 0xD1	; 209
 528:	1f 07       	cpc	r17, r31
 52a:	b1 f7       	brne	.-20     	; 0x518 <main+0xc0>
					printf("%c", RF_RXBUF[i]);	// Print characters if passed the checksum
				printf("\n");
 52c:	8a e0       	ldi	r24, 0x0A	; 10
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	0e 94 b7 02 	call	0x56e	; 0x56e <putchar>
 534:	02 c0       	rjmp	.+4      	; 0x53a <main+0xe2>
				//printf("To Ready mode\n");
			}
			// otherwise reset and start listening again
			else
			{
				rx_reset();
 536:	0e 94 f5 00 	call	0x1ea	; 0x1ea <rx_reset>
				//printf("Bad checksum RX RESET...Listening again\n");
			}
			delay_ms(50);
 53a:	82 e3       	ldi	r24, 0x32	; 50
 53c:	90 e0       	ldi	r25, 0x00	; 0
 53e:	0e 94 c9 00 	call	0x192	; 0x192 <delay_ms>
 542:	c2 cf       	rjmp	.-124    	; 0x4c8 <main+0x70>

00000544 <printf>:
 544:	a0 e0       	ldi	r26, 0x00	; 0
 546:	b0 e0       	ldi	r27, 0x00	; 0
 548:	e8 ea       	ldi	r30, 0xA8	; 168
 54a:	f2 e0       	ldi	r31, 0x02	; 2
 54c:	0c 94 80 05 	jmp	0xb00	; 0xb00 <__prologue_saves__+0x20>
 550:	fe 01       	movw	r30, r28
 552:	35 96       	adiw	r30, 0x05	; 5
 554:	61 91       	ld	r22, Z+
 556:	71 91       	ld	r23, Z+
 558:	80 91 e5 01 	lds	r24, 0x01E5
 55c:	90 91 e6 01 	lds	r25, 0x01E6
 560:	af 01       	movw	r20, r30
 562:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <vfprintf>
 566:	20 96       	adiw	r28, 0x00	; 0
 568:	e2 e0       	ldi	r30, 0x02	; 2
 56a:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__epilogue_restores__+0x20>

0000056e <putchar>:
 56e:	60 91 e5 01 	lds	r22, 0x01E5
 572:	70 91 e6 01 	lds	r23, 0x01E6
 576:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 57a:	08 95       	ret

0000057c <puts>:
 57c:	0f 93       	push	r16
 57e:	1f 93       	push	r17
 580:	cf 93       	push	r28
 582:	df 93       	push	r29
 584:	8c 01       	movw	r16, r24
 586:	e0 91 e5 01 	lds	r30, 0x01E5
 58a:	f0 91 e6 01 	lds	r31, 0x01E6
 58e:	83 81       	ldd	r24, Z+3	; 0x03
 590:	81 ff       	sbrs	r24, 1
 592:	21 c0       	rjmp	.+66     	; 0x5d6 <puts+0x5a>
 594:	c0 e0       	ldi	r28, 0x00	; 0
 596:	d0 e0       	ldi	r29, 0x00	; 0
 598:	0d c0       	rjmp	.+26     	; 0x5b4 <puts+0x38>
 59a:	e0 91 e5 01 	lds	r30, 0x01E5
 59e:	f0 91 e6 01 	lds	r31, 0x01E6
 5a2:	20 85       	ldd	r18, Z+8	; 0x08
 5a4:	31 85       	ldd	r19, Z+9	; 0x09
 5a6:	bf 01       	movw	r22, r30
 5a8:	f9 01       	movw	r30, r18
 5aa:	09 95       	icall
 5ac:	89 2b       	or	r24, r25
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <puts+0x38>
 5b0:	cf ef       	ldi	r28, 0xFF	; 255
 5b2:	df ef       	ldi	r29, 0xFF	; 255
 5b4:	f8 01       	movw	r30, r16
 5b6:	81 91       	ld	r24, Z+
 5b8:	8f 01       	movw	r16, r30
 5ba:	88 23       	and	r24, r24
 5bc:	71 f7       	brne	.-36     	; 0x59a <puts+0x1e>
 5be:	e0 91 e5 01 	lds	r30, 0x01E5
 5c2:	f0 91 e6 01 	lds	r31, 0x01E6
 5c6:	20 85       	ldd	r18, Z+8	; 0x08
 5c8:	31 85       	ldd	r19, Z+9	; 0x09
 5ca:	8a e0       	ldi	r24, 0x0A	; 10
 5cc:	bf 01       	movw	r22, r30
 5ce:	f9 01       	movw	r30, r18
 5d0:	09 95       	icall
 5d2:	89 2b       	or	r24, r25
 5d4:	11 f0       	breq	.+4      	; 0x5da <puts+0x5e>
 5d6:	cf ef       	ldi	r28, 0xFF	; 255
 5d8:	df ef       	ldi	r29, 0xFF	; 255
 5da:	ce 01       	movw	r24, r28
 5dc:	df 91       	pop	r29
 5de:	cf 91       	pop	r28
 5e0:	1f 91       	pop	r17
 5e2:	0f 91       	pop	r16
 5e4:	08 95       	ret

000005e6 <vfprintf>:
 5e6:	ab e0       	ldi	r26, 0x0B	; 11
 5e8:	b0 e0       	ldi	r27, 0x00	; 0
 5ea:	e9 ef       	ldi	r30, 0xF9	; 249
 5ec:	f2 e0       	ldi	r31, 0x02	; 2
 5ee:	0c 94 70 05 	jmp	0xae0	; 0xae0 <__prologue_saves__>
 5f2:	3c 01       	movw	r6, r24
 5f4:	2b 01       	movw	r4, r22
 5f6:	5a 01       	movw	r10, r20
 5f8:	fc 01       	movw	r30, r24
 5fa:	17 82       	std	Z+7, r1	; 0x07
 5fc:	16 82       	std	Z+6, r1	; 0x06
 5fe:	83 81       	ldd	r24, Z+3	; 0x03
 600:	81 fd       	sbrc	r24, 1
 602:	03 c0       	rjmp	.+6      	; 0x60a <vfprintf+0x24>
 604:	6f ef       	ldi	r22, 0xFF	; 255
 606:	7f ef       	ldi	r23, 0xFF	; 255
 608:	c6 c1       	rjmp	.+908    	; 0x996 <vfprintf+0x3b0>
 60a:	9a e0       	ldi	r25, 0x0A	; 10
 60c:	89 2e       	mov	r8, r25
 60e:	1e 01       	movw	r2, r28
 610:	08 94       	sec
 612:	21 1c       	adc	r2, r1
 614:	31 1c       	adc	r3, r1
 616:	f3 01       	movw	r30, r6
 618:	23 81       	ldd	r18, Z+3	; 0x03
 61a:	f2 01       	movw	r30, r4
 61c:	23 fd       	sbrc	r18, 3
 61e:	85 91       	lpm	r24, Z+
 620:	23 ff       	sbrs	r18, 3
 622:	81 91       	ld	r24, Z+
 624:	2f 01       	movw	r4, r30
 626:	88 23       	and	r24, r24
 628:	09 f4       	brne	.+2      	; 0x62c <vfprintf+0x46>
 62a:	b2 c1       	rjmp	.+868    	; 0x990 <vfprintf+0x3aa>
 62c:	85 32       	cpi	r24, 0x25	; 37
 62e:	39 f4       	brne	.+14     	; 0x63e <vfprintf+0x58>
 630:	23 fd       	sbrc	r18, 3
 632:	85 91       	lpm	r24, Z+
 634:	23 ff       	sbrs	r18, 3
 636:	81 91       	ld	r24, Z+
 638:	2f 01       	movw	r4, r30
 63a:	85 32       	cpi	r24, 0x25	; 37
 63c:	29 f4       	brne	.+10     	; 0x648 <vfprintf+0x62>
 63e:	90 e0       	ldi	r25, 0x00	; 0
 640:	b3 01       	movw	r22, r6
 642:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 646:	e7 cf       	rjmp	.-50     	; 0x616 <vfprintf+0x30>
 648:	98 2f       	mov	r25, r24
 64a:	ff 24       	eor	r15, r15
 64c:	ee 24       	eor	r14, r14
 64e:	99 24       	eor	r9, r9
 650:	ff e1       	ldi	r31, 0x1F	; 31
 652:	ff 15       	cp	r31, r15
 654:	d0 f0       	brcs	.+52     	; 0x68a <vfprintf+0xa4>
 656:	9b 32       	cpi	r25, 0x2B	; 43
 658:	69 f0       	breq	.+26     	; 0x674 <vfprintf+0x8e>
 65a:	9c 32       	cpi	r25, 0x2C	; 44
 65c:	28 f4       	brcc	.+10     	; 0x668 <vfprintf+0x82>
 65e:	90 32       	cpi	r25, 0x20	; 32
 660:	59 f0       	breq	.+22     	; 0x678 <vfprintf+0x92>
 662:	93 32       	cpi	r25, 0x23	; 35
 664:	91 f4       	brne	.+36     	; 0x68a <vfprintf+0xa4>
 666:	0e c0       	rjmp	.+28     	; 0x684 <vfprintf+0x9e>
 668:	9d 32       	cpi	r25, 0x2D	; 45
 66a:	49 f0       	breq	.+18     	; 0x67e <vfprintf+0x98>
 66c:	90 33       	cpi	r25, 0x30	; 48
 66e:	69 f4       	brne	.+26     	; 0x68a <vfprintf+0xa4>
 670:	41 e0       	ldi	r20, 0x01	; 1
 672:	24 c0       	rjmp	.+72     	; 0x6bc <vfprintf+0xd6>
 674:	52 e0       	ldi	r21, 0x02	; 2
 676:	f5 2a       	or	r15, r21
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	f8 2a       	or	r15, r24
 67c:	28 c0       	rjmp	.+80     	; 0x6ce <vfprintf+0xe8>
 67e:	98 e0       	ldi	r25, 0x08	; 8
 680:	f9 2a       	or	r15, r25
 682:	25 c0       	rjmp	.+74     	; 0x6ce <vfprintf+0xe8>
 684:	e0 e1       	ldi	r30, 0x10	; 16
 686:	fe 2a       	or	r15, r30
 688:	22 c0       	rjmp	.+68     	; 0x6ce <vfprintf+0xe8>
 68a:	f7 fc       	sbrc	r15, 7
 68c:	29 c0       	rjmp	.+82     	; 0x6e0 <vfprintf+0xfa>
 68e:	89 2f       	mov	r24, r25
 690:	80 53       	subi	r24, 0x30	; 48
 692:	8a 30       	cpi	r24, 0x0A	; 10
 694:	70 f4       	brcc	.+28     	; 0x6b2 <vfprintf+0xcc>
 696:	f6 fe       	sbrs	r15, 6
 698:	05 c0       	rjmp	.+10     	; 0x6a4 <vfprintf+0xbe>
 69a:	98 9c       	mul	r9, r8
 69c:	90 2c       	mov	r9, r0
 69e:	11 24       	eor	r1, r1
 6a0:	98 0e       	add	r9, r24
 6a2:	15 c0       	rjmp	.+42     	; 0x6ce <vfprintf+0xe8>
 6a4:	e8 9c       	mul	r14, r8
 6a6:	e0 2c       	mov	r14, r0
 6a8:	11 24       	eor	r1, r1
 6aa:	e8 0e       	add	r14, r24
 6ac:	f0 e2       	ldi	r31, 0x20	; 32
 6ae:	ff 2a       	or	r15, r31
 6b0:	0e c0       	rjmp	.+28     	; 0x6ce <vfprintf+0xe8>
 6b2:	9e 32       	cpi	r25, 0x2E	; 46
 6b4:	29 f4       	brne	.+10     	; 0x6c0 <vfprintf+0xda>
 6b6:	f6 fc       	sbrc	r15, 6
 6b8:	6b c1       	rjmp	.+726    	; 0x990 <vfprintf+0x3aa>
 6ba:	40 e4       	ldi	r20, 0x40	; 64
 6bc:	f4 2a       	or	r15, r20
 6be:	07 c0       	rjmp	.+14     	; 0x6ce <vfprintf+0xe8>
 6c0:	9c 36       	cpi	r25, 0x6C	; 108
 6c2:	19 f4       	brne	.+6      	; 0x6ca <vfprintf+0xe4>
 6c4:	50 e8       	ldi	r21, 0x80	; 128
 6c6:	f5 2a       	or	r15, r21
 6c8:	02 c0       	rjmp	.+4      	; 0x6ce <vfprintf+0xe8>
 6ca:	98 36       	cpi	r25, 0x68	; 104
 6cc:	49 f4       	brne	.+18     	; 0x6e0 <vfprintf+0xfa>
 6ce:	f2 01       	movw	r30, r4
 6d0:	23 fd       	sbrc	r18, 3
 6d2:	95 91       	lpm	r25, Z+
 6d4:	23 ff       	sbrs	r18, 3
 6d6:	91 91       	ld	r25, Z+
 6d8:	2f 01       	movw	r4, r30
 6da:	99 23       	and	r25, r25
 6dc:	09 f0       	breq	.+2      	; 0x6e0 <vfprintf+0xfa>
 6de:	b8 cf       	rjmp	.-144    	; 0x650 <vfprintf+0x6a>
 6e0:	89 2f       	mov	r24, r25
 6e2:	85 54       	subi	r24, 0x45	; 69
 6e4:	83 30       	cpi	r24, 0x03	; 3
 6e6:	18 f0       	brcs	.+6      	; 0x6ee <vfprintf+0x108>
 6e8:	80 52       	subi	r24, 0x20	; 32
 6ea:	83 30       	cpi	r24, 0x03	; 3
 6ec:	38 f4       	brcc	.+14     	; 0x6fc <vfprintf+0x116>
 6ee:	44 e0       	ldi	r20, 0x04	; 4
 6f0:	50 e0       	ldi	r21, 0x00	; 0
 6f2:	a4 0e       	add	r10, r20
 6f4:	b5 1e       	adc	r11, r21
 6f6:	5f e3       	ldi	r21, 0x3F	; 63
 6f8:	59 83       	std	Y+1, r21	; 0x01
 6fa:	0f c0       	rjmp	.+30     	; 0x71a <vfprintf+0x134>
 6fc:	93 36       	cpi	r25, 0x63	; 99
 6fe:	31 f0       	breq	.+12     	; 0x70c <vfprintf+0x126>
 700:	93 37       	cpi	r25, 0x73	; 115
 702:	79 f0       	breq	.+30     	; 0x722 <vfprintf+0x13c>
 704:	93 35       	cpi	r25, 0x53	; 83
 706:	09 f0       	breq	.+2      	; 0x70a <vfprintf+0x124>
 708:	56 c0       	rjmp	.+172    	; 0x7b6 <vfprintf+0x1d0>
 70a:	20 c0       	rjmp	.+64     	; 0x74c <vfprintf+0x166>
 70c:	f5 01       	movw	r30, r10
 70e:	80 81       	ld	r24, Z
 710:	89 83       	std	Y+1, r24	; 0x01
 712:	42 e0       	ldi	r20, 0x02	; 2
 714:	50 e0       	ldi	r21, 0x00	; 0
 716:	a4 0e       	add	r10, r20
 718:	b5 1e       	adc	r11, r21
 71a:	61 01       	movw	r12, r2
 71c:	01 e0       	ldi	r16, 0x01	; 1
 71e:	10 e0       	ldi	r17, 0x00	; 0
 720:	12 c0       	rjmp	.+36     	; 0x746 <vfprintf+0x160>
 722:	f5 01       	movw	r30, r10
 724:	c0 80       	ld	r12, Z
 726:	d1 80       	ldd	r13, Z+1	; 0x01
 728:	f6 fc       	sbrc	r15, 6
 72a:	03 c0       	rjmp	.+6      	; 0x732 <vfprintf+0x14c>
 72c:	6f ef       	ldi	r22, 0xFF	; 255
 72e:	7f ef       	ldi	r23, 0xFF	; 255
 730:	02 c0       	rjmp	.+4      	; 0x736 <vfprintf+0x150>
 732:	69 2d       	mov	r22, r9
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	42 e0       	ldi	r20, 0x02	; 2
 738:	50 e0       	ldi	r21, 0x00	; 0
 73a:	a4 0e       	add	r10, r20
 73c:	b5 1e       	adc	r11, r21
 73e:	c6 01       	movw	r24, r12
 740:	0e 94 db 04 	call	0x9b6	; 0x9b6 <strnlen>
 744:	8c 01       	movw	r16, r24
 746:	5f e7       	ldi	r21, 0x7F	; 127
 748:	f5 22       	and	r15, r21
 74a:	14 c0       	rjmp	.+40     	; 0x774 <vfprintf+0x18e>
 74c:	f5 01       	movw	r30, r10
 74e:	c0 80       	ld	r12, Z
 750:	d1 80       	ldd	r13, Z+1	; 0x01
 752:	f6 fc       	sbrc	r15, 6
 754:	03 c0       	rjmp	.+6      	; 0x75c <vfprintf+0x176>
 756:	6f ef       	ldi	r22, 0xFF	; 255
 758:	7f ef       	ldi	r23, 0xFF	; 255
 75a:	02 c0       	rjmp	.+4      	; 0x760 <vfprintf+0x17a>
 75c:	69 2d       	mov	r22, r9
 75e:	70 e0       	ldi	r23, 0x00	; 0
 760:	42 e0       	ldi	r20, 0x02	; 2
 762:	50 e0       	ldi	r21, 0x00	; 0
 764:	a4 0e       	add	r10, r20
 766:	b5 1e       	adc	r11, r21
 768:	c6 01       	movw	r24, r12
 76a:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <strnlen_P>
 76e:	8c 01       	movw	r16, r24
 770:	50 e8       	ldi	r21, 0x80	; 128
 772:	f5 2a       	or	r15, r21
 774:	f3 fe       	sbrs	r15, 3
 776:	07 c0       	rjmp	.+14     	; 0x786 <vfprintf+0x1a0>
 778:	1a c0       	rjmp	.+52     	; 0x7ae <vfprintf+0x1c8>
 77a:	80 e2       	ldi	r24, 0x20	; 32
 77c:	90 e0       	ldi	r25, 0x00	; 0
 77e:	b3 01       	movw	r22, r6
 780:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 784:	ea 94       	dec	r14
 786:	8e 2d       	mov	r24, r14
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	08 17       	cp	r16, r24
 78c:	19 07       	cpc	r17, r25
 78e:	a8 f3       	brcs	.-22     	; 0x77a <vfprintf+0x194>
 790:	0e c0       	rjmp	.+28     	; 0x7ae <vfprintf+0x1c8>
 792:	f6 01       	movw	r30, r12
 794:	f7 fc       	sbrc	r15, 7
 796:	85 91       	lpm	r24, Z+
 798:	f7 fe       	sbrs	r15, 7
 79a:	81 91       	ld	r24, Z+
 79c:	6f 01       	movw	r12, r30
 79e:	90 e0       	ldi	r25, 0x00	; 0
 7a0:	b3 01       	movw	r22, r6
 7a2:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 7a6:	e1 10       	cpse	r14, r1
 7a8:	ea 94       	dec	r14
 7aa:	01 50       	subi	r16, 0x01	; 1
 7ac:	10 40       	sbci	r17, 0x00	; 0
 7ae:	01 15       	cp	r16, r1
 7b0:	11 05       	cpc	r17, r1
 7b2:	79 f7       	brne	.-34     	; 0x792 <vfprintf+0x1ac>
 7b4:	ea c0       	rjmp	.+468    	; 0x98a <vfprintf+0x3a4>
 7b6:	94 36       	cpi	r25, 0x64	; 100
 7b8:	11 f0       	breq	.+4      	; 0x7be <vfprintf+0x1d8>
 7ba:	99 36       	cpi	r25, 0x69	; 105
 7bc:	69 f5       	brne	.+90     	; 0x818 <vfprintf+0x232>
 7be:	f7 fe       	sbrs	r15, 7
 7c0:	08 c0       	rjmp	.+16     	; 0x7d2 <vfprintf+0x1ec>
 7c2:	f5 01       	movw	r30, r10
 7c4:	20 81       	ld	r18, Z
 7c6:	31 81       	ldd	r19, Z+1	; 0x01
 7c8:	42 81       	ldd	r20, Z+2	; 0x02
 7ca:	53 81       	ldd	r21, Z+3	; 0x03
 7cc:	84 e0       	ldi	r24, 0x04	; 4
 7ce:	90 e0       	ldi	r25, 0x00	; 0
 7d0:	0a c0       	rjmp	.+20     	; 0x7e6 <vfprintf+0x200>
 7d2:	f5 01       	movw	r30, r10
 7d4:	80 81       	ld	r24, Z
 7d6:	91 81       	ldd	r25, Z+1	; 0x01
 7d8:	9c 01       	movw	r18, r24
 7da:	44 27       	eor	r20, r20
 7dc:	37 fd       	sbrc	r19, 7
 7de:	40 95       	com	r20
 7e0:	54 2f       	mov	r21, r20
 7e2:	82 e0       	ldi	r24, 0x02	; 2
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	a8 0e       	add	r10, r24
 7e8:	b9 1e       	adc	r11, r25
 7ea:	9f e6       	ldi	r25, 0x6F	; 111
 7ec:	f9 22       	and	r15, r25
 7ee:	57 ff       	sbrs	r21, 7
 7f0:	09 c0       	rjmp	.+18     	; 0x804 <vfprintf+0x21e>
 7f2:	50 95       	com	r21
 7f4:	40 95       	com	r20
 7f6:	30 95       	com	r19
 7f8:	21 95       	neg	r18
 7fa:	3f 4f       	sbci	r19, 0xFF	; 255
 7fc:	4f 4f       	sbci	r20, 0xFF	; 255
 7fe:	5f 4f       	sbci	r21, 0xFF	; 255
 800:	e0 e8       	ldi	r30, 0x80	; 128
 802:	fe 2a       	or	r15, r30
 804:	ca 01       	movw	r24, r20
 806:	b9 01       	movw	r22, r18
 808:	a1 01       	movw	r20, r2
 80a:	2a e0       	ldi	r18, 0x0A	; 10
 80c:	30 e0       	ldi	r19, 0x00	; 0
 80e:	0e 94 12 05 	call	0xa24	; 0xa24 <__ultoa_invert>
 812:	d8 2e       	mov	r13, r24
 814:	d2 18       	sub	r13, r2
 816:	40 c0       	rjmp	.+128    	; 0x898 <vfprintf+0x2b2>
 818:	95 37       	cpi	r25, 0x75	; 117
 81a:	29 f4       	brne	.+10     	; 0x826 <vfprintf+0x240>
 81c:	1f 2d       	mov	r17, r15
 81e:	1f 7e       	andi	r17, 0xEF	; 239
 820:	2a e0       	ldi	r18, 0x0A	; 10
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	1d c0       	rjmp	.+58     	; 0x860 <vfprintf+0x27a>
 826:	1f 2d       	mov	r17, r15
 828:	19 7f       	andi	r17, 0xF9	; 249
 82a:	9f 36       	cpi	r25, 0x6F	; 111
 82c:	61 f0       	breq	.+24     	; 0x846 <vfprintf+0x260>
 82e:	90 37       	cpi	r25, 0x70	; 112
 830:	20 f4       	brcc	.+8      	; 0x83a <vfprintf+0x254>
 832:	98 35       	cpi	r25, 0x58	; 88
 834:	09 f0       	breq	.+2      	; 0x838 <vfprintf+0x252>
 836:	ac c0       	rjmp	.+344    	; 0x990 <vfprintf+0x3aa>
 838:	0f c0       	rjmp	.+30     	; 0x858 <vfprintf+0x272>
 83a:	90 37       	cpi	r25, 0x70	; 112
 83c:	39 f0       	breq	.+14     	; 0x84c <vfprintf+0x266>
 83e:	98 37       	cpi	r25, 0x78	; 120
 840:	09 f0       	breq	.+2      	; 0x844 <vfprintf+0x25e>
 842:	a6 c0       	rjmp	.+332    	; 0x990 <vfprintf+0x3aa>
 844:	04 c0       	rjmp	.+8      	; 0x84e <vfprintf+0x268>
 846:	28 e0       	ldi	r18, 0x08	; 8
 848:	30 e0       	ldi	r19, 0x00	; 0
 84a:	0a c0       	rjmp	.+20     	; 0x860 <vfprintf+0x27a>
 84c:	10 61       	ori	r17, 0x10	; 16
 84e:	14 fd       	sbrc	r17, 4
 850:	14 60       	ori	r17, 0x04	; 4
 852:	20 e1       	ldi	r18, 0x10	; 16
 854:	30 e0       	ldi	r19, 0x00	; 0
 856:	04 c0       	rjmp	.+8      	; 0x860 <vfprintf+0x27a>
 858:	14 fd       	sbrc	r17, 4
 85a:	16 60       	ori	r17, 0x06	; 6
 85c:	20 e1       	ldi	r18, 0x10	; 16
 85e:	32 e0       	ldi	r19, 0x02	; 2
 860:	17 ff       	sbrs	r17, 7
 862:	08 c0       	rjmp	.+16     	; 0x874 <vfprintf+0x28e>
 864:	f5 01       	movw	r30, r10
 866:	60 81       	ld	r22, Z
 868:	71 81       	ldd	r23, Z+1	; 0x01
 86a:	82 81       	ldd	r24, Z+2	; 0x02
 86c:	93 81       	ldd	r25, Z+3	; 0x03
 86e:	44 e0       	ldi	r20, 0x04	; 4
 870:	50 e0       	ldi	r21, 0x00	; 0
 872:	08 c0       	rjmp	.+16     	; 0x884 <vfprintf+0x29e>
 874:	f5 01       	movw	r30, r10
 876:	80 81       	ld	r24, Z
 878:	91 81       	ldd	r25, Z+1	; 0x01
 87a:	bc 01       	movw	r22, r24
 87c:	80 e0       	ldi	r24, 0x00	; 0
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	42 e0       	ldi	r20, 0x02	; 2
 882:	50 e0       	ldi	r21, 0x00	; 0
 884:	a4 0e       	add	r10, r20
 886:	b5 1e       	adc	r11, r21
 888:	a1 01       	movw	r20, r2
 88a:	0e 94 12 05 	call	0xa24	; 0xa24 <__ultoa_invert>
 88e:	d8 2e       	mov	r13, r24
 890:	d2 18       	sub	r13, r2
 892:	8f e7       	ldi	r24, 0x7F	; 127
 894:	f8 2e       	mov	r15, r24
 896:	f1 22       	and	r15, r17
 898:	f6 fe       	sbrs	r15, 6
 89a:	0b c0       	rjmp	.+22     	; 0x8b2 <vfprintf+0x2cc>
 89c:	5e ef       	ldi	r21, 0xFE	; 254
 89e:	f5 22       	and	r15, r21
 8a0:	d9 14       	cp	r13, r9
 8a2:	38 f4       	brcc	.+14     	; 0x8b2 <vfprintf+0x2cc>
 8a4:	f4 fe       	sbrs	r15, 4
 8a6:	07 c0       	rjmp	.+14     	; 0x8b6 <vfprintf+0x2d0>
 8a8:	f2 fc       	sbrc	r15, 2
 8aa:	05 c0       	rjmp	.+10     	; 0x8b6 <vfprintf+0x2d0>
 8ac:	8f ee       	ldi	r24, 0xEF	; 239
 8ae:	f8 22       	and	r15, r24
 8b0:	02 c0       	rjmp	.+4      	; 0x8b6 <vfprintf+0x2d0>
 8b2:	1d 2d       	mov	r17, r13
 8b4:	01 c0       	rjmp	.+2      	; 0x8b8 <vfprintf+0x2d2>
 8b6:	19 2d       	mov	r17, r9
 8b8:	f4 fe       	sbrs	r15, 4
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x2f0>
 8bc:	fe 01       	movw	r30, r28
 8be:	ed 0d       	add	r30, r13
 8c0:	f1 1d       	adc	r31, r1
 8c2:	80 81       	ld	r24, Z
 8c4:	80 33       	cpi	r24, 0x30	; 48
 8c6:	19 f4       	brne	.+6      	; 0x8ce <vfprintf+0x2e8>
 8c8:	99 ee       	ldi	r25, 0xE9	; 233
 8ca:	f9 22       	and	r15, r25
 8cc:	08 c0       	rjmp	.+16     	; 0x8de <vfprintf+0x2f8>
 8ce:	1f 5f       	subi	r17, 0xFF	; 255
 8d0:	f2 fe       	sbrs	r15, 2
 8d2:	05 c0       	rjmp	.+10     	; 0x8de <vfprintf+0x2f8>
 8d4:	03 c0       	rjmp	.+6      	; 0x8dc <vfprintf+0x2f6>
 8d6:	8f 2d       	mov	r24, r15
 8d8:	86 78       	andi	r24, 0x86	; 134
 8da:	09 f0       	breq	.+2      	; 0x8de <vfprintf+0x2f8>
 8dc:	1f 5f       	subi	r17, 0xFF	; 255
 8de:	0f 2d       	mov	r16, r15
 8e0:	f3 fc       	sbrc	r15, 3
 8e2:	14 c0       	rjmp	.+40     	; 0x90c <vfprintf+0x326>
 8e4:	f0 fe       	sbrs	r15, 0
 8e6:	0f c0       	rjmp	.+30     	; 0x906 <vfprintf+0x320>
 8e8:	1e 15       	cp	r17, r14
 8ea:	10 f0       	brcs	.+4      	; 0x8f0 <vfprintf+0x30a>
 8ec:	9d 2c       	mov	r9, r13
 8ee:	0b c0       	rjmp	.+22     	; 0x906 <vfprintf+0x320>
 8f0:	9d 2c       	mov	r9, r13
 8f2:	9e 0c       	add	r9, r14
 8f4:	91 1a       	sub	r9, r17
 8f6:	1e 2d       	mov	r17, r14
 8f8:	06 c0       	rjmp	.+12     	; 0x906 <vfprintf+0x320>
 8fa:	80 e2       	ldi	r24, 0x20	; 32
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	b3 01       	movw	r22, r6
 900:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 904:	1f 5f       	subi	r17, 0xFF	; 255
 906:	1e 15       	cp	r17, r14
 908:	c0 f3       	brcs	.-16     	; 0x8fa <vfprintf+0x314>
 90a:	04 c0       	rjmp	.+8      	; 0x914 <vfprintf+0x32e>
 90c:	1e 15       	cp	r17, r14
 90e:	10 f4       	brcc	.+4      	; 0x914 <vfprintf+0x32e>
 910:	e1 1a       	sub	r14, r17
 912:	01 c0       	rjmp	.+2      	; 0x916 <vfprintf+0x330>
 914:	ee 24       	eor	r14, r14
 916:	04 ff       	sbrs	r16, 4
 918:	0f c0       	rjmp	.+30     	; 0x938 <vfprintf+0x352>
 91a:	80 e3       	ldi	r24, 0x30	; 48
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	b3 01       	movw	r22, r6
 920:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 924:	02 ff       	sbrs	r16, 2
 926:	1d c0       	rjmp	.+58     	; 0x962 <vfprintf+0x37c>
 928:	01 fd       	sbrc	r16, 1
 92a:	03 c0       	rjmp	.+6      	; 0x932 <vfprintf+0x34c>
 92c:	88 e7       	ldi	r24, 0x78	; 120
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e c0       	rjmp	.+28     	; 0x94e <vfprintf+0x368>
 932:	88 e5       	ldi	r24, 0x58	; 88
 934:	90 e0       	ldi	r25, 0x00	; 0
 936:	0b c0       	rjmp	.+22     	; 0x94e <vfprintf+0x368>
 938:	80 2f       	mov	r24, r16
 93a:	86 78       	andi	r24, 0x86	; 134
 93c:	91 f0       	breq	.+36     	; 0x962 <vfprintf+0x37c>
 93e:	01 ff       	sbrs	r16, 1
 940:	02 c0       	rjmp	.+4      	; 0x946 <vfprintf+0x360>
 942:	8b e2       	ldi	r24, 0x2B	; 43
 944:	01 c0       	rjmp	.+2      	; 0x948 <vfprintf+0x362>
 946:	80 e2       	ldi	r24, 0x20	; 32
 948:	f7 fc       	sbrc	r15, 7
 94a:	8d e2       	ldi	r24, 0x2D	; 45
 94c:	90 e0       	ldi	r25, 0x00	; 0
 94e:	b3 01       	movw	r22, r6
 950:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 954:	06 c0       	rjmp	.+12     	; 0x962 <vfprintf+0x37c>
 956:	80 e3       	ldi	r24, 0x30	; 48
 958:	90 e0       	ldi	r25, 0x00	; 0
 95a:	b3 01       	movw	r22, r6
 95c:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 960:	9a 94       	dec	r9
 962:	d9 14       	cp	r13, r9
 964:	c0 f3       	brcs	.-16     	; 0x956 <vfprintf+0x370>
 966:	da 94       	dec	r13
 968:	f1 01       	movw	r30, r2
 96a:	ed 0d       	add	r30, r13
 96c:	f1 1d       	adc	r31, r1
 96e:	80 81       	ld	r24, Z
 970:	90 e0       	ldi	r25, 0x00	; 0
 972:	b3 01       	movw	r22, r6
 974:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 978:	dd 20       	and	r13, r13
 97a:	a9 f7       	brne	.-22     	; 0x966 <vfprintf+0x380>
 97c:	06 c0       	rjmp	.+12     	; 0x98a <vfprintf+0x3a4>
 97e:	80 e2       	ldi	r24, 0x20	; 32
 980:	90 e0       	ldi	r25, 0x00	; 0
 982:	b3 01       	movw	r22, r6
 984:	0e 94 e6 04 	call	0x9cc	; 0x9cc <fputc>
 988:	ea 94       	dec	r14
 98a:	ee 20       	and	r14, r14
 98c:	c1 f7       	brne	.-16     	; 0x97e <vfprintf+0x398>
 98e:	43 ce       	rjmp	.-890    	; 0x616 <vfprintf+0x30>
 990:	f3 01       	movw	r30, r6
 992:	66 81       	ldd	r22, Z+6	; 0x06
 994:	77 81       	ldd	r23, Z+7	; 0x07
 996:	cb 01       	movw	r24, r22
 998:	2b 96       	adiw	r28, 0x0b	; 11
 99a:	e2 e1       	ldi	r30, 0x12	; 18
 99c:	0c 94 8c 05 	jmp	0xb18	; 0xb18 <__epilogue_restores__>

000009a0 <strnlen_P>:
 9a0:	fc 01       	movw	r30, r24
 9a2:	05 90       	lpm	r0, Z+
 9a4:	61 50       	subi	r22, 0x01	; 1
 9a6:	70 40       	sbci	r23, 0x00	; 0
 9a8:	01 10       	cpse	r0, r1
 9aa:	d8 f7       	brcc	.-10     	; 0x9a2 <strnlen_P+0x2>
 9ac:	80 95       	com	r24
 9ae:	90 95       	com	r25
 9b0:	8e 0f       	add	r24, r30
 9b2:	9f 1f       	adc	r25, r31
 9b4:	08 95       	ret

000009b6 <strnlen>:
 9b6:	fc 01       	movw	r30, r24
 9b8:	61 50       	subi	r22, 0x01	; 1
 9ba:	70 40       	sbci	r23, 0x00	; 0
 9bc:	01 90       	ld	r0, Z+
 9be:	01 10       	cpse	r0, r1
 9c0:	d8 f7       	brcc	.-10     	; 0x9b8 <strnlen+0x2>
 9c2:	80 95       	com	r24
 9c4:	90 95       	com	r25
 9c6:	8e 0f       	add	r24, r30
 9c8:	9f 1f       	adc	r25, r31
 9ca:	08 95       	ret

000009cc <fputc>:
 9cc:	0f 93       	push	r16
 9ce:	1f 93       	push	r17
 9d0:	cf 93       	push	r28
 9d2:	df 93       	push	r29
 9d4:	8c 01       	movw	r16, r24
 9d6:	eb 01       	movw	r28, r22
 9d8:	8b 81       	ldd	r24, Y+3	; 0x03
 9da:	81 ff       	sbrs	r24, 1
 9dc:	1b c0       	rjmp	.+54     	; 0xa14 <fputc+0x48>
 9de:	82 ff       	sbrs	r24, 2
 9e0:	0d c0       	rjmp	.+26     	; 0x9fc <fputc+0x30>
 9e2:	2e 81       	ldd	r18, Y+6	; 0x06
 9e4:	3f 81       	ldd	r19, Y+7	; 0x07
 9e6:	8c 81       	ldd	r24, Y+4	; 0x04
 9e8:	9d 81       	ldd	r25, Y+5	; 0x05
 9ea:	28 17       	cp	r18, r24
 9ec:	39 07       	cpc	r19, r25
 9ee:	64 f4       	brge	.+24     	; 0xa08 <fputc+0x3c>
 9f0:	e8 81       	ld	r30, Y
 9f2:	f9 81       	ldd	r31, Y+1	; 0x01
 9f4:	01 93       	st	Z+, r16
 9f6:	f9 83       	std	Y+1, r31	; 0x01
 9f8:	e8 83       	st	Y, r30
 9fa:	06 c0       	rjmp	.+12     	; 0xa08 <fputc+0x3c>
 9fc:	e8 85       	ldd	r30, Y+8	; 0x08
 9fe:	f9 85       	ldd	r31, Y+9	; 0x09
 a00:	80 2f       	mov	r24, r16
 a02:	09 95       	icall
 a04:	89 2b       	or	r24, r25
 a06:	31 f4       	brne	.+12     	; 0xa14 <fputc+0x48>
 a08:	8e 81       	ldd	r24, Y+6	; 0x06
 a0a:	9f 81       	ldd	r25, Y+7	; 0x07
 a0c:	01 96       	adiw	r24, 0x01	; 1
 a0e:	9f 83       	std	Y+7, r25	; 0x07
 a10:	8e 83       	std	Y+6, r24	; 0x06
 a12:	02 c0       	rjmp	.+4      	; 0xa18 <fputc+0x4c>
 a14:	0f ef       	ldi	r16, 0xFF	; 255
 a16:	1f ef       	ldi	r17, 0xFF	; 255
 a18:	c8 01       	movw	r24, r16
 a1a:	df 91       	pop	r29
 a1c:	cf 91       	pop	r28
 a1e:	1f 91       	pop	r17
 a20:	0f 91       	pop	r16
 a22:	08 95       	ret

00000a24 <__ultoa_invert>:
 a24:	fa 01       	movw	r30, r20
 a26:	aa 27       	eor	r26, r26
 a28:	28 30       	cpi	r18, 0x08	; 8
 a2a:	51 f1       	breq	.+84     	; 0xa80 <__ultoa_invert+0x5c>
 a2c:	20 31       	cpi	r18, 0x10	; 16
 a2e:	81 f1       	breq	.+96     	; 0xa90 <__ultoa_invert+0x6c>
 a30:	e8 94       	clt
 a32:	6f 93       	push	r22
 a34:	6e 7f       	andi	r22, 0xFE	; 254
 a36:	6e 5f       	subi	r22, 0xFE	; 254
 a38:	7f 4f       	sbci	r23, 0xFF	; 255
 a3a:	8f 4f       	sbci	r24, 0xFF	; 255
 a3c:	9f 4f       	sbci	r25, 0xFF	; 255
 a3e:	af 4f       	sbci	r26, 0xFF	; 255
 a40:	b1 e0       	ldi	r27, 0x01	; 1
 a42:	3e d0       	rcall	.+124    	; 0xac0 <__ultoa_invert+0x9c>
 a44:	b4 e0       	ldi	r27, 0x04	; 4
 a46:	3c d0       	rcall	.+120    	; 0xac0 <__ultoa_invert+0x9c>
 a48:	67 0f       	add	r22, r23
 a4a:	78 1f       	adc	r23, r24
 a4c:	89 1f       	adc	r24, r25
 a4e:	9a 1f       	adc	r25, r26
 a50:	a1 1d       	adc	r26, r1
 a52:	68 0f       	add	r22, r24
 a54:	79 1f       	adc	r23, r25
 a56:	8a 1f       	adc	r24, r26
 a58:	91 1d       	adc	r25, r1
 a5a:	a1 1d       	adc	r26, r1
 a5c:	6a 0f       	add	r22, r26
 a5e:	71 1d       	adc	r23, r1
 a60:	81 1d       	adc	r24, r1
 a62:	91 1d       	adc	r25, r1
 a64:	a1 1d       	adc	r26, r1
 a66:	20 d0       	rcall	.+64     	; 0xaa8 <__ultoa_invert+0x84>
 a68:	09 f4       	brne	.+2      	; 0xa6c <__ultoa_invert+0x48>
 a6a:	68 94       	set
 a6c:	3f 91       	pop	r19
 a6e:	2a e0       	ldi	r18, 0x0A	; 10
 a70:	26 9f       	mul	r18, r22
 a72:	11 24       	eor	r1, r1
 a74:	30 19       	sub	r19, r0
 a76:	30 5d       	subi	r19, 0xD0	; 208
 a78:	31 93       	st	Z+, r19
 a7a:	de f6       	brtc	.-74     	; 0xa32 <__ultoa_invert+0xe>
 a7c:	cf 01       	movw	r24, r30
 a7e:	08 95       	ret
 a80:	46 2f       	mov	r20, r22
 a82:	47 70       	andi	r20, 0x07	; 7
 a84:	40 5d       	subi	r20, 0xD0	; 208
 a86:	41 93       	st	Z+, r20
 a88:	b3 e0       	ldi	r27, 0x03	; 3
 a8a:	0f d0       	rcall	.+30     	; 0xaaa <__ultoa_invert+0x86>
 a8c:	c9 f7       	brne	.-14     	; 0xa80 <__ultoa_invert+0x5c>
 a8e:	f6 cf       	rjmp	.-20     	; 0xa7c <__ultoa_invert+0x58>
 a90:	46 2f       	mov	r20, r22
 a92:	4f 70       	andi	r20, 0x0F	; 15
 a94:	40 5d       	subi	r20, 0xD0	; 208
 a96:	4a 33       	cpi	r20, 0x3A	; 58
 a98:	18 f0       	brcs	.+6      	; 0xaa0 <__ultoa_invert+0x7c>
 a9a:	49 5d       	subi	r20, 0xD9	; 217
 a9c:	31 fd       	sbrc	r19, 1
 a9e:	40 52       	subi	r20, 0x20	; 32
 aa0:	41 93       	st	Z+, r20
 aa2:	02 d0       	rcall	.+4      	; 0xaa8 <__ultoa_invert+0x84>
 aa4:	a9 f7       	brne	.-22     	; 0xa90 <__ultoa_invert+0x6c>
 aa6:	ea cf       	rjmp	.-44     	; 0xa7c <__ultoa_invert+0x58>
 aa8:	b4 e0       	ldi	r27, 0x04	; 4
 aaa:	a6 95       	lsr	r26
 aac:	97 95       	ror	r25
 aae:	87 95       	ror	r24
 ab0:	77 95       	ror	r23
 ab2:	67 95       	ror	r22
 ab4:	ba 95       	dec	r27
 ab6:	c9 f7       	brne	.-14     	; 0xaaa <__ultoa_invert+0x86>
 ab8:	00 97       	sbiw	r24, 0x00	; 0
 aba:	61 05       	cpc	r22, r1
 abc:	71 05       	cpc	r23, r1
 abe:	08 95       	ret
 ac0:	9b 01       	movw	r18, r22
 ac2:	ac 01       	movw	r20, r24
 ac4:	0a 2e       	mov	r0, r26
 ac6:	06 94       	lsr	r0
 ac8:	57 95       	ror	r21
 aca:	47 95       	ror	r20
 acc:	37 95       	ror	r19
 ace:	27 95       	ror	r18
 ad0:	ba 95       	dec	r27
 ad2:	c9 f7       	brne	.-14     	; 0xac6 <__ultoa_invert+0xa2>
 ad4:	62 0f       	add	r22, r18
 ad6:	73 1f       	adc	r23, r19
 ad8:	84 1f       	adc	r24, r20
 ada:	95 1f       	adc	r25, r21
 adc:	a0 1d       	adc	r26, r0
 ade:	08 95       	ret

00000ae0 <__prologue_saves__>:
 ae0:	2f 92       	push	r2
 ae2:	3f 92       	push	r3
 ae4:	4f 92       	push	r4
 ae6:	5f 92       	push	r5
 ae8:	6f 92       	push	r6
 aea:	7f 92       	push	r7
 aec:	8f 92       	push	r8
 aee:	9f 92       	push	r9
 af0:	af 92       	push	r10
 af2:	bf 92       	push	r11
 af4:	cf 92       	push	r12
 af6:	df 92       	push	r13
 af8:	ef 92       	push	r14
 afa:	ff 92       	push	r15
 afc:	0f 93       	push	r16
 afe:	1f 93       	push	r17
 b00:	cf 93       	push	r28
 b02:	df 93       	push	r29
 b04:	cd b7       	in	r28, 0x3d	; 61
 b06:	de b7       	in	r29, 0x3e	; 62
 b08:	ca 1b       	sub	r28, r26
 b0a:	db 0b       	sbc	r29, r27
 b0c:	0f b6       	in	r0, 0x3f	; 63
 b0e:	f8 94       	cli
 b10:	de bf       	out	0x3e, r29	; 62
 b12:	0f be       	out	0x3f, r0	; 63
 b14:	cd bf       	out	0x3d, r28	; 61
 b16:	09 94       	ijmp

00000b18 <__epilogue_restores__>:
 b18:	2a 88       	ldd	r2, Y+18	; 0x12
 b1a:	39 88       	ldd	r3, Y+17	; 0x11
 b1c:	48 88       	ldd	r4, Y+16	; 0x10
 b1e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b20:	6e 84       	ldd	r6, Y+14	; 0x0e
 b22:	7d 84       	ldd	r7, Y+13	; 0x0d
 b24:	8c 84       	ldd	r8, Y+12	; 0x0c
 b26:	9b 84       	ldd	r9, Y+11	; 0x0b
 b28:	aa 84       	ldd	r10, Y+10	; 0x0a
 b2a:	b9 84       	ldd	r11, Y+9	; 0x09
 b2c:	c8 84       	ldd	r12, Y+8	; 0x08
 b2e:	df 80       	ldd	r13, Y+7	; 0x07
 b30:	ee 80       	ldd	r14, Y+6	; 0x06
 b32:	fd 80       	ldd	r15, Y+5	; 0x05
 b34:	0c 81       	ldd	r16, Y+4	; 0x04
 b36:	1b 81       	ldd	r17, Y+3	; 0x03
 b38:	aa 81       	ldd	r26, Y+2	; 0x02
 b3a:	b9 81       	ldd	r27, Y+1	; 0x01
 b3c:	ce 0f       	add	r28, r30
 b3e:	d1 1d       	adc	r29, r1
 b40:	0f b6       	in	r0, 0x3f	; 63
 b42:	f8 94       	cli
 b44:	de bf       	out	0x3e, r29	; 62
 b46:	0f be       	out	0x3f, r0	; 63
 b48:	cd bf       	out	0x3d, r28	; 61
 b4a:	ed 01       	movw	r28, r26
 b4c:	08 95       	ret

00000b4e <_exit>:
 b4e:	f8 94       	cli

00000b50 <__stop_program>:
 b50:	ff cf       	rjmp	.-2      	; 0xb50 <__stop_program>
